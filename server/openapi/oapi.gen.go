// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ApplicationRequest defines model for ApplicationRequest.
type ApplicationRequest = TlsClientParameters

// ApplicationResponse defines model for ApplicationResponse.
type ApplicationResponse struct {
	// RawClientHello ClientHelloのバイト列 (hexエンコード)
	RawClientHello string `json:"raw_client_hello"`

	// RawServerApplicationDataResponse ServerHelloを含めたサーバー側の応答のバイト列 (hexエンコード)
	RawServerApplicationDataResponse string `json:"raw_server_application_data_response"`

	// RawServerApplicationDataResponseDecoded ServerHelloを含めたサーバー側の応答のバイト列を復号化したもの
	RawServerApplicationDataResponseDecoded string `json:"raw_server_application_data_response_decoded"`

	// RawServerResponse ServerHelloを含めたサーバー側の応答のバイト列 (hexエンコード)
	RawServerResponse string `json:"raw_server_response"`

	// RawServerResponseDecoded ServerHelloを含めたサーバー側の応答のバイト列を復号化したもの
	RawServerResponseDecoded string `json:"raw_server_response_decoded"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Message エラーメッセージ
	Message string `json:"message"`
}

// HandshakeRequest defines model for HandshakeRequest.
type HandshakeRequest = TlsClientParameters

// HandshakeResponse TLSハンドシェイク成功時のレスポンス
type HandshakeResponse struct {
	// RawClientHello ClientHelloのバイト列 (hexエンコード)
	RawClientHello string `json:"raw_client_hello"`

	// RawServerResponse ServerHelloを含めたサーバー側の応答のバイト列 (hexエンコード)
	RawServerResponse string `json:"raw_server_response"`

	// RawServerResponseDecoded ServerHelloを含めたサーバー側の応答のバイト列を復号化したもの
	RawServerResponseDecoded string `json:"raw_server_response_decoded"`
}

// TlsClientParameters defines model for TlsClientParameters.
type TlsClientParameters struct {
	// ApplicationData 送信するアプリケーションデータ（HTTPプロトコル） 平文
	ApplicationData *string `json:"application_data,omitempty"`

	// CipherSuites 使用する Cipher Suite のリスト (16進数文字列)
	CipherSuites []string `json:"cipher_suites"`

	// ClientRandom クライアントの Random 値 (hex)
	ClientRandom string `json:"client_random"`

	// KeyShares KeyShare に使うアルゴリズム (楕円曲線名)
	KeyShares []string `json:"key_shares"`

	// ProtocolVersion 使用する TLS バージョン
	ProtocolVersion string `json:"protocol_version"`

	// ServerName Server Name Indication (SNI)拡張に設定するホスト名。指定しない場合は'server'の値が使用されます。
	ServerName string `json:"server_name"`

	// SignatureAlgorithms サポートする署名アルゴリズム
	SignatureAlgorithms []string `json:"signature_algorithms"`

	// SupportedGroups サポートする楕円曲線 (KeyShare Group)
	SupportedGroups []string `json:"supported_groups"`
}

// PostTlsApplicationJSONRequestBody defines body for PostTlsApplication for application/json ContentType.
type PostTlsApplicationJSONRequestBody = ApplicationRequest

// PostTlsHandshakeJSONRequestBody defines body for PostTlsHandshake for application/json ContentType.
type PostTlsHandshakeJSONRequestBody = HandshakeRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostTlsApplicationWithBody request with any body
	PostTlsApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTlsApplication(ctx context.Context, body PostTlsApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTlsHandshakeWithBody request with any body
	PostTlsHandshakeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTlsHandshake(ctx context.Context, body PostTlsHandshakeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostTlsApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTlsApplicationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTlsApplication(ctx context.Context, body PostTlsApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTlsApplicationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTlsHandshakeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTlsHandshakeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTlsHandshake(ctx context.Context, body PostTlsHandshakeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTlsHandshakeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostTlsApplicationRequest calls the generic PostTlsApplication builder with application/json body
func NewPostTlsApplicationRequest(server string, body PostTlsApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTlsApplicationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTlsApplicationRequestWithBody generates requests for PostTlsApplication with any type of body
func NewPostTlsApplicationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tls/application")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTlsHandshakeRequest calls the generic PostTlsHandshake builder with application/json body
func NewPostTlsHandshakeRequest(server string, body PostTlsHandshakeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTlsHandshakeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTlsHandshakeRequestWithBody generates requests for PostTlsHandshake with any type of body
func NewPostTlsHandshakeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tls/handshake")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostTlsApplicationWithBodyWithResponse request with any body
	PostTlsApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTlsApplicationResponse, error)

	PostTlsApplicationWithResponse(ctx context.Context, body PostTlsApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTlsApplicationResponse, error)

	// PostTlsHandshakeWithBodyWithResponse request with any body
	PostTlsHandshakeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTlsHandshakeResponse, error)

	PostTlsHandshakeWithResponse(ctx context.Context, body PostTlsHandshakeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTlsHandshakeResponse, error)
}

type PostTlsApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostTlsApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTlsApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTlsHandshakeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HandshakeResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostTlsHandshakeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTlsHandshakeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostTlsApplicationWithBodyWithResponse request with arbitrary body returning *PostTlsApplicationResponse
func (c *ClientWithResponses) PostTlsApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTlsApplicationResponse, error) {
	rsp, err := c.PostTlsApplicationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTlsApplicationResponse(rsp)
}

func (c *ClientWithResponses) PostTlsApplicationWithResponse(ctx context.Context, body PostTlsApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTlsApplicationResponse, error) {
	rsp, err := c.PostTlsApplication(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTlsApplicationResponse(rsp)
}

// PostTlsHandshakeWithBodyWithResponse request with arbitrary body returning *PostTlsHandshakeResponse
func (c *ClientWithResponses) PostTlsHandshakeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTlsHandshakeResponse, error) {
	rsp, err := c.PostTlsHandshakeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTlsHandshakeResponse(rsp)
}

func (c *ClientWithResponses) PostTlsHandshakeWithResponse(ctx context.Context, body PostTlsHandshakeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTlsHandshakeResponse, error) {
	rsp, err := c.PostTlsHandshake(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTlsHandshakeResponse(rsp)
}

// ParsePostTlsApplicationResponse parses an HTTP response from a PostTlsApplicationWithResponse call
func ParsePostTlsApplicationResponse(rsp *http.Response) (*PostTlsApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTlsApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostTlsHandshakeResponse parses an HTTP response from a PostTlsHandshakeWithResponse call
func ParsePostTlsHandshakeResponse(rsp *http.Response) (*PostTlsHandshakeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTlsHandshakeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HandshakeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// TLS 1.3 アプリケーションデータを送信
	// (POST /tls/application)
	PostTlsApplication(ctx echo.Context) error
	// TLS 1.3 ハンドシェイクを実行
	// (POST /tls/handshake)
	PostTlsHandshake(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostTlsApplication converts echo context to params.
func (w *ServerInterfaceWrapper) PostTlsApplication(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTlsApplication(ctx)
	return err
}

// PostTlsHandshake converts echo context to params.
func (w *ServerInterfaceWrapper) PostTlsHandshake(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTlsHandshake(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/tls/application", wrapper.PostTlsApplication)
	router.POST(baseURL+"/tls/handshake", wrapper.PostTlsHandshake)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
